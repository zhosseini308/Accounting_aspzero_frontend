import { __assign, __decorate } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
/**
 * A simple Angular2+ component used as a wrapper for [TreantJS](https://fperucic.github.io/treant-js/) library
 * for visualization of tree (chart) diagrams, with additional functionality.
 */
var NgxTreantJsComponent = /** @class */ (function () {
    function NgxTreantJsComponent() {
        this.clicked = new EventEmitter();
        this.hovered = new EventEmitter();
        this.dragged = new EventEmitter();
        this.dropped = new EventEmitter();
        this.updated = new EventEmitter();
        this.loadedNodes = new EventEmitter();
        this.loadedTreant = new EventEmitter();
        this.loadedTree = new EventEmitter();
    }
    NgxTreantJsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var callback = function (callback) {
            var popoverElm1;
            var popoverElm2;
            var timeout;
            var draggedNode;
            var droppedNode;
            var __this = _this;
            // add ids to nodeDOMs
            for (var i = 0; i < callback.nodeDB.db.length; i++) {
                callback.nodeDB.db[i].nodeDOM.id = callback.nodeDB.db[i].id;
            }
            _this.loadedTree.emit(callback);
            var $oNodes = $("#" + _this.chartId + " .node");
            // add support for drag and drop functionality
            var addDragAndDropSupport = function () {
                for (var i = 0; i < $oNodes.length; i++) {
                    $oNodes[i].draggable = true;
                    $oNodes[i].classList.add('drop');
                    $oNodes[i].addEventListener('dragstart', drag, false);
                    $oNodes[i].addEventListener('drop', drop, false);
                    $oNodes[i].addEventListener('dragover', allowDrop, false);
                }
            };
            // swap nodes after drag and drop
            function swapNodes(nodes, dragIndex, dropIndex) {
                var temp = nodes[dragIndex];
                var dragClone = __assign({}, temp);
                var dropClone = __assign({}, nodes[dropIndex]);
                nodes[dragIndex] = nodes[dropIndex];
                nodes[dropIndex] = temp;
                // set dragged node props
                nodes[dragIndex].id = dragClone.id;
                nodes[dragIndex].nodeDOM.id = dragClone.id;
                nodes[dragIndex].parentId = dragClone.parentId;
                nodes[dragIndex].children = dragClone.children;
                nodes[dragIndex].connStyle = dragClone.connStyle;
                nodes[dragIndex].stackChildren = dragClone.stackChildren;
                nodes[dragIndex].stackParentId = dragClone.stackParentId;
                nodes[dragIndex].stackParent = dragClone.stackParent;
                nodes[dragIndex].leftNeighborId = dragClone.leftNeighborId;
                nodes[dragIndex].rightNeighborId = dragClone.rightNeighborId;
                nodes[dragIndex].collapsed = dragClone.collapsed;
                nodes[dragIndex].collapsable = dragClone.collapsable;
                // set dropped node props
                nodes[dropIndex].id = dropClone.id;
                nodes[dropIndex].nodeDOM.id = dropClone.id;
                nodes[dropIndex].parentId = dropClone.parentId;
                nodes[dropIndex].children = dropClone.children;
                nodes[dropIndex].connStyle = dropClone.connStyle;
                nodes[dropIndex].stackChildren = dropClone.stackChildren;
                nodes[dropIndex].stackParent = dropClone.stackParent;
                nodes[dropIndex].stackParentId = dropClone.stackParentId;
                nodes[dropIndex].leftNeighborId = dropClone.leftNeighborId;
                nodes[dropIndex].rightNeighborId = dropClone.rightNeighborId;
                nodes[dropIndex].collapsed = dropClone.collapsed;
                nodes[dropIndex].collapsable = dropClone.collapsable;
            }
            function hidePopover() {
                $(popoverElm1).popover('hide');
                $(popoverElm2).popover('hide');
            }
            function drag(event) {
                var _this = this;
                draggedNode = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                hidePopover();
                __this.dragged.emit({ draggedNode: draggedNode, $: $ });
            }
            function drop(event) {
                var _this = this;
                event.preventDefault();
                droppedNode = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                hidePopover();
                __this.dropped.emit({ draggedNode: droppedNode, droppedNode: draggedNode, $: $ });
                var dragIndex = callback.nodeDB.db.findIndex(function (n) { return n.id == draggedNode.id; });
                var dropIndex = callback.nodeDB.db.findIndex(function (n) { return n.id == droppedNode.id; });
                swapNodes(callback.nodeDB.db, dragIndex, dropIndex);
                callback.positionTree();
            }
            function allowDrop(event) {
                event.preventDefault();
            }
            function updateTextVal(currentEle, value, classVal, node, propName) {
                var isTextUpdated = false;
                $(document).off('click');
                $(currentEle).html('<input class="input-field" style="width:' +
                    $(currentEle).width() +
                    'px;" type="text" value="' +
                    value +
                    '"/>');
                $('.input-field').focus();
                $('.input-field').keyup(function (event) {
                    if (event.keyCode === 13) {
                        var inputClass = $(event.target).attr('class');
                        var newValue = $('.input-field').val() ? $('.input-field').val() : value;
                        $(currentEle).html('<p class="' + classVal + '">' + newValue + '</p>');
                        if (inputClass === 'input-field') {
                            isTextUpdated = true;
                        }
                        if (propName) {
                            node.text[propName] = newValue;
                            node.width = $(currentEle).width();
                        }
                        callback.positionTree();
                        __this.updated.emit({ node: node, $: $ });
                    }
                });
                $(document).click(function () {
                    if ($(event.target).attr('class') !== 'input-field' && !isTextUpdated) {
                        var newValue = $('.input-field').val() ? $('.input-field').val() : value;
                        $(currentEle).html('<p class="' + classVal + '">' + newValue + '</p>');
                        $(document).off('click');
                        if (propName) {
                            node.text[propName] = newValue;
                            node.width = $(currentEle).width();
                        }
                        callback.positionTree();
                        __this.updated.emit({ node: node, $: $ });
                    }
                });
            }
            _this.isDraggable && addDragAndDropSupport();
            $oNodes.off('click').on('click', function (event) {
                var _this = this;
                var node = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                hidePopover();
                __this.clicked.emit({ node: node, $: $ });
            });
            $oNodes.off('dblclick').on('dblclick', function (e) {
                var _this = this;
                if ($(event.target).attr('class') !== 'input-field') {
                    e.stopPropagation();
                    var node = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                    var currentEle = $(event.target);
                    var value = $(event.target).text();
                    var classVal = $(event.target).attr('class');
                    var propName = classVal && classVal.split('-')[1];
                    hidePopover();
                    node.text &&
                        node.text[propName] &&
                        updateTextVal(currentEle, value, classVal, node, propName);
                }
            });
            if (_this.popoverSettings) {
                $oNodes.popover(_this.popoverSettings);
                $oNodes
                    .off('mouseenter')
                    .on('mouseenter', function (e) {
                    var _this = this;
                    hidePopover();
                    popoverElm1 = this;
                    $(this).popover('show');
                    var node = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                    __this.hovered.emit({ node: node, $: $ });
                    clearTimeout(timeout);
                    $('.popover')
                        .off('mouseleave')
                        .on('mouseleave', function () {
                        hidePopover();
                    });
                })
                    .off('mouseleave')
                    .on('mouseleave', function (e) {
                    var hovered = false;
                    popoverElm2 = this;
                    $('.popover').hover(function () {
                        hovered = true;
                    }, function () {
                        hovered = false;
                    });
                    if (!$('.popover:hover').length) {
                        timeout = setTimeout(function () {
                            !hovered && hidePopover();
                        }, __this.mouseleaveMilliseconds || 0);
                    }
                });
            }
            // emit Tree nodes
            _this.loadedNodes.emit({ nodes: callback.nodeDB.db, $: $ });
        };
        // create Treant instance and add its container ID
        // this instance can be useful to operate on the Tree
        var treant = new Treant(this.data, callback, $);
        treant.container_id = this.chartId;
        this.loadedTreant.emit(treant);
    };
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "chartId", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "chartClass", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "data", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "popoverSettings", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "mouseleaveMilliseconds", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "isDraggable", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "textProps", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "clicked", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "hovered", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "dragged", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "dropped", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "updated", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "loadedNodes", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "loadedTreant", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "loadedTree", void 0);
    NgxTreantJsComponent = __decorate([
        Component({
            selector: 'ngx-treant-chart',
            template: "<div [className]=\"chartClass\" [id]=\"chartId\"></div>\n"
        })
    ], NgxTreantJsComponent);
    return NgxTreantJsComponent;
}());
export { NgxTreantJsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRyZWFudC1qcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWhtZWQ3NTcvbmd4LXRyZWFudC1qcy8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtdHJlYW50LWpzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBaUIsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLdEY7OztHQUdHO0FBS0g7SUFvQkk7UUFWVSxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2hELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNoRCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWhELGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDcEQsaUJBQVksR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNyRCxlQUFVLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFFOUMsQ0FBQztJQUVoQiw4Q0FBZSxHQUFmO1FBQUEsaUJBeU9DO1FBeE9HLElBQU0sUUFBUSxHQUFHLFVBQUMsUUFBYTtZQUMzQixJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLE9BQU8sQ0FBQztZQUNaLElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksV0FBVyxDQUFDO1lBRWhCLElBQU0sTUFBTSxHQUFHLEtBQUksQ0FBQztZQUVwQixzQkFBc0I7WUFDdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDaEQsUUFBUSxDQUFDLE1BQU0sQ0FB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cG9uZW50LCBBZnRlclZpZXdJbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZGVjbGFyZSBjb25zdCBUcmVhbnQ6IGFueTtcbmRlY2xhcmUgY29uc3QgJDogYW55O1xuXG4vKipcbiAqIEEgc2ltcGxlIEFuZ3VsYXIyKyBjb21wb25lbnQgdXNlZCBhcyBhIHdyYXBwZXIgZm9yIFtUcmVhbnRKU10oaHR0cHM6Ly9mcGVydWNpYy5naXRodWIuaW8vdHJlYW50LWpzLykgbGlicmFyeVxuICogZm9yIHZpc3VhbGl6YXRpb24gb2YgdHJlZSAoY2hhcnQpIGRpYWdyYW1zLCB3aXRoIGFkZGl0aW9uYWwgZnVuY3Rpb25hbGl0eS5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtdHJlYW50LWNoYXJ0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbmd4LXRyZWFudC1qcy5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIE5neFRyZWFudEpzQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgQElucHV0KCkgY2hhcnRJZDogc3RyaW5nO1xuICAgIEBJbnB1dCgpIGNoYXJ0Q2xhc3M6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGRhdGE6IGFueTtcbiAgICBASW5wdXQoKSBwb3BvdmVyU2V0dGluZ3M6IGFueTtcbiAgICBASW5wdXQoKSBtb3VzZWxlYXZlTWlsbGlzZWNvbmRzOiBudW1iZXI7XG4gICAgQElucHV0KCkgaXNEcmFnZ2FibGU6IGJvb2xlYW47XG4gICAgQElucHV0KCkgdGV4dFByb3BzOiBhbnk7XG5cbiAgICBAT3V0cHV0KCkgY2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIGhvdmVyZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIEBPdXRwdXQoKSBkcmFnZ2VkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgZHJvcHBlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIHVwZGF0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQE91dHB1dCgpIGxvYWRlZE5vZGVzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgbG9hZGVkVHJlYW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgbG9hZGVkVHJlZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKGNhbGxiYWNrOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGxldCBwb3BvdmVyRWxtMTtcbiAgICAgICAgICAgIGxldCBwb3BvdmVyRWxtMjtcbiAgICAgICAgICAgIGxldCB0aW1lb3V0O1xuICAgICAgICAgICAgbGV0IGRyYWdnZWROb2RlO1xuICAgICAgICAgICAgbGV0IGRyb3BwZWROb2RlO1xuXG4gICAgICAgICAgICBjb25zdCBfX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyBhZGQgaWRzIHRvIG5vZGVET01zXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbGxiYWNrLm5vZGVEQi5kYi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLm5vZGVEQi5kYltpXS5ub2RlRE9NLmlkID0gY2FsbGJhY2subm9kZURCLmRiW2ldLmlkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxvYWRlZFRyZWUuZW1pdChjYWxsYmFjayk7XG5cbiAgICAgICAgICAgIGNvbnN0ICRvTm9kZXMgPSAkKGAjJHt0aGlzLmNoYXJ0SWR9IC5ub2RlYCk7XG5cbiAgICAgICAgICAgIC8vIGFkZCBzdXBwb3J0IGZvciBkcmFnIGFuZCBkcm9wIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICAgIGNvbnN0IGFkZERyYWdBbmREcm9wU3VwcG9ydCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRvTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgJG9Ob2Rlc1tpXS5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAkb05vZGVzW2ldLmNsYXNzTGlzdC5hZGQoJ2Ryb3AnKTtcbiAgICAgICAgICAgICAgICAgICAgJG9Ob2Rlc1tpXS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBkcmFnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICRvTm9kZXNbaV0uYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGRyb3AsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgJG9Ob2Rlc1tpXS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGFsbG93RHJvcCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIHN3YXAgbm9kZXMgYWZ0ZXIgZHJhZyBhbmQgZHJvcFxuICAgICAgICAgICAgZnVuY3Rpb24gc3dhcE5vZGVzKG5vZGVzLCBkcmFnSW5kZXgsIGRyb3BJbmRleCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBub2Rlc1tkcmFnSW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRyYWdDbG9uZSA9IHsgLi4udGVtcCB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGRyb3BDbG9uZSA9IHsgLi4ubm9kZXNbZHJvcEluZGV4XSB9O1xuXG4gICAgICAgICAgICAgICAgbm9kZXNbZHJhZ0luZGV4XSA9IG5vZGVzW2Ryb3BJbmRleF07XG4gICAgICAgICAgICAgICAgbm9kZXNbZHJvcEluZGV4XSA9IHRlbXA7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgZHJhZ2dlZCBub2RlIHByb3BzXG4gICAgICAgICAgICAgICAgbm9kZXNbZHJhZ0luZGV4XS5pZCA9IGRyYWdDbG9uZS5pZDtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcmFnSW5kZXhdLm5vZGVET00uaWQgPSBkcmFnQ2xvbmUuaWQ7XG4gICAgICAgICAgICAgICAgbm9kZXNbZHJhZ0luZGV4XS5wYXJlbnRJZCA9IGRyYWdDbG9uZS5wYXJlbnRJZDtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcmFnSW5kZXhdLmNoaWxkcmVuID0gZHJhZ0Nsb25lLmNoaWxkcmVuO1xuICAgICAgICAgICAgICAgIG5vZGVzW2RyYWdJbmRleF0uY29ublN0eWxlID0gZHJhZ0Nsb25lLmNvbm5TdHlsZTtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcmFnSW5kZXhdLnN0YWNrQ2hpbGRyZW4gPSBkcmFnQ2xvbmUuc3RhY2tDaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcmFnSW5kZXhdLnN0YWNrUGFyZW50SWQgPSBkcmFnQ2xvbmUuc3RhY2tQYXJlbnRJZDtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcmFnSW5kZXhdLnN0YWNrUGFyZW50ID0gZHJhZ0Nsb25lLnN0YWNrUGFyZW50O1xuICAgICAgICAgICAgICAgIG5vZGVzW2RyYWdJbmRleF0ubGVmdE5laWdoYm9ySWQgPSBkcmFnQ2xvbmUubGVmdE5laWdoYm9ySWQ7XG4gICAgICAgICAgICAgICAgbm9kZXNbZHJhZ0luZGV4XS5yaWdodE5laWdoYm9ySWQgPSBkcmFnQ2xvbmUucmlnaHROZWlnaGJvcklkO1xuICAgICAgICAgICAgICAgIG5vZGVzW2RyYWdJbmRleF0uY29sbGFwc2VkID0gZHJhZ0Nsb25lLmNvbGxhcHNlZDtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcmFnSW5kZXhdLmNvbGxhcHNhYmxlID0gZHJhZ0Nsb25lLmNvbGxhcHNhYmxlO1xuXG4gICAgICAgICAgICAgICAgLy8gc2V0IGRyb3BwZWQgbm9kZSBwcm9wc1xuICAgICAgICAgICAgICAgIG5vZGVzW2Ryb3BJbmRleF0uaWQgPSBkcm9wQ2xvbmUuaWQ7XG4gICAgICAgICAgICAgICAgbm9kZXNbZHJvcEluZGV4XS5ub2RlRE9NLmlkID0gZHJvcENsb25lLmlkO1xuICAgICAgICAgICAgICAgIG5vZGVzW2Ryb3BJbmRleF0ucGFyZW50SWQgPSBkcm9wQ2xvbmUucGFyZW50SWQ7XG4gICAgICAgICAgICAgICAgbm9kZXNbZHJvcEluZGV4XS5jaGlsZHJlbiA9IGRyb3BDbG9uZS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcm9wSW5kZXhdLmNvbm5TdHlsZSA9IGRyb3BDbG9uZS5jb25uU3R5bGU7XG4gICAgICAgICAgICAgICAgbm9kZXNbZHJvcEluZGV4XS5zdGFja0NoaWxkcmVuID0gZHJvcENsb25lLnN0YWNrQ2hpbGRyZW47XG4gICAgICAgICAgICAgICAgbm9kZXNbZHJvcEluZGV4XS5zdGFja1BhcmVudCA9IGRyb3BDbG9uZS5zdGFja1BhcmVudDtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcm9wSW5kZXhdLnN0YWNrUGFyZW50SWQgPSBkcm9wQ2xvbmUuc3RhY2tQYXJlbnRJZDtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcm9wSW5kZXhdLmxlZnROZWlnaGJvcklkID0gZHJvcENsb25lLmxlZnROZWlnaGJvcklkO1xuICAgICAgICAgICAgICAgIG5vZGVzW2Ryb3BJbmRleF0ucmlnaHROZWlnaGJvcklkID0gZHJvcENsb25lLnJpZ2h0TmVpZ2hib3JJZDtcbiAgICAgICAgICAgICAgICBub2Rlc1tkcm9wSW5kZXhdLmNvbGxhcHNlZCA9IGRyb3BDbG9uZS5jb2xsYXBzZWQ7XG4gICAgICAgICAgICAgICAgbm9kZXNbZHJvcEluZGV4XS5jb2xsYXBzYWJsZSA9IGRyb3BDbG9uZS5jb2xsYXBzYWJsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gaGlkZVBvcG92ZXIoKSB7XG4gICAgICAgICAgICAgICAgJChwb3BvdmVyRWxtMSkucG9wb3ZlcignaGlkZScpO1xuICAgICAgICAgICAgICAgICQocG9wb3ZlckVsbTIpLnBvcG92ZXIoJ2hpZGUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZHJhZyhldmVudCkge1xuICAgICAgICAgICAgICAgIGRyYWdnZWROb2RlID0gY2FsbGJhY2subm9kZURCLmRiLmZpbmQoKG4pID0+IG4uaWQgPT0gJCh0aGlzKS5hdHRyKCdpZCcpKTtcblxuICAgICAgICAgICAgICAgIGhpZGVQb3BvdmVyKCk7XG5cbiAgICAgICAgICAgICAgICBfX3RoaXMuZHJhZ2dlZC5lbWl0KHsgZHJhZ2dlZE5vZGUsICQgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRyb3AoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGRyb3BwZWROb2RlID0gY2FsbGJhY2subm9kZURCLmRiLmZpbmQoKG4pID0+IG4uaWQgPT0gJCh0aGlzKS5hdHRyKCdpZCcpKTtcblxuICAgICAgICAgICAgICAgIGhpZGVQb3BvdmVyKCk7XG5cbiAgICAgICAgICAgICAgICBfX3RoaXMuZHJvcHBlZC5lbWl0KHsgZHJhZ2dlZE5vZGU6IGRyb3BwZWROb2RlLCBkcm9wcGVkTm9kZTogZHJhZ2dlZE5vZGUsICQgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkcmFnSW5kZXggPSBjYWxsYmFjay5ub2RlREIuZGIuZmluZEluZGV4KChuKSA9PiBuLmlkID09IGRyYWdnZWROb2RlLmlkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkcm9wSW5kZXggPSBjYWxsYmFjay5ub2RlREIuZGIuZmluZEluZGV4KChuKSA9PiBuLmlkID09IGRyb3BwZWROb2RlLmlkKTtcblxuICAgICAgICAgICAgICAgIHN3YXBOb2RlcyhjYWxsYmFjay5ub2RlREIuZGIsIGRyYWdJbmRleCwgZHJvcEluZGV4KTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLnBvc2l0aW9uVHJlZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhbGxvd0Ryb3AoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUZXh0VmFsKGN1cnJlbnRFbGUsIHZhbHVlLCBjbGFzc1ZhbCwgbm9kZSwgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXNUZXh0VXBkYXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub2ZmKCdjbGljaycpO1xuICAgICAgICAgICAgICAgICQoY3VycmVudEVsZSkuaHRtbChcbiAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cImlucHV0LWZpZWxkXCIgc3R5bGU9XCJ3aWR0aDonICtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoY3VycmVudEVsZSkud2lkdGgoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAncHg7XCIgdHlwZT1cInRleHRcIiB2YWx1ZT1cIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1wiLz4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAkKCcuaW5wdXQtZmllbGQnKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICQoJy5pbnB1dC1maWVsZCcpLmtleXVwKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0Q2xhc3MgPSAkKGV2ZW50LnRhcmdldCkuYXR0cignY2xhc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gJCgnLmlucHV0LWZpZWxkJykudmFsKCkgPyAkKCcuaW5wdXQtZmllbGQnKS52YWwoKSA6IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKGN1cnJlbnRFbGUpLmh0bWwoJzxwIGNsYXNzPVwiJyArIGNsYXNzVmFsICsgJ1wiPicgKyBuZXdWYWx1ZSArICc8L3A+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRDbGFzcyA9PT0gJ2lucHV0LWZpZWxkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVGV4dFVwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnRleHRbcHJvcE5hbWVdID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS53aWR0aCA9ICQoY3VycmVudEVsZSkud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sucG9zaXRpb25UcmVlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9fdGhpcy51cGRhdGVkLmVtaXQoeyBub2RlLCAkIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuYXR0cignY2xhc3MnKSAhPT0gJ2lucHV0LWZpZWxkJyAmJiAhaXNUZXh0VXBkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSAkKCcuaW5wdXQtZmllbGQnKS52YWwoKSA/ICQoJy5pbnB1dC1maWVsZCcpLnZhbCgpIDogdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQoY3VycmVudEVsZSkuaHRtbCgnPHAgY2xhc3M9XCInICsgY2xhc3NWYWwgKyAnXCI+JyArIG5ld1ZhbHVlICsgJzwvcD4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignY2xpY2snKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50ZXh0W3Byb3BOYW1lXSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUud2lkdGggPSAkKGN1cnJlbnRFbGUpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLnBvc2l0aW9uVHJlZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3RoaXMudXBkYXRlZC5lbWl0KHsgbm9kZSwgJCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dhYmxlICYmIGFkZERyYWdBbmREcm9wU3VwcG9ydCgpO1xuXG4gICAgICAgICAgICAkb05vZGVzLm9mZignY2xpY2snKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gY2FsbGJhY2subm9kZURCLmRiLmZpbmQoKG4pID0+IG4uaWQgPT0gJCh0aGlzKS5hdHRyKCdpZCcpKTtcblxuICAgICAgICAgICAgICAgIGhpZGVQb3BvdmVyKCk7XG5cbiAgICAgICAgICAgICAgICBfX3RoaXMuY2xpY2tlZC5lbWl0KHsgbm9kZSwgJCB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkb05vZGVzLm9mZignZGJsY2xpY2snKS5vbignZGJsY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuYXR0cignY2xhc3MnKSAhPT0gJ2lucHV0LWZpZWxkJykge1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gY2FsbGJhY2subm9kZURCLmRiLmZpbmQoKG4pID0+IG4uaWQgPT0gJCh0aGlzKS5hdHRyKCdpZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEVsZSA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAkKGV2ZW50LnRhcmdldCkudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGFzc1ZhbCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKCdjbGFzcycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wTmFtZSA9IGNsYXNzVmFsICYmIGNsYXNzVmFsLnNwbGl0KCctJylbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgaGlkZVBvcG92ZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICBub2RlLnRleHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudGV4dFtwcm9wTmFtZV0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRleHRWYWwoY3VycmVudEVsZSwgdmFsdWUsIGNsYXNzVmFsLCBub2RlLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBvcG92ZXJTZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICRvTm9kZXMucG9wb3Zlcih0aGlzLnBvcG92ZXJTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgJG9Ob2Rlc1xuICAgICAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWVudGVyJylcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVQb3BvdmVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcG92ZXJFbG0xID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wb3BvdmVyKCdzaG93Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBjYWxsYmFjay5ub2RlREIuZGIuZmluZCgobikgPT4gbi5pZCA9PSAkKHRoaXMpLmF0dHIoJ2lkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX190aGlzLmhvdmVyZWQuZW1pdCh7IG5vZGUsICQgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnBvcG92ZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlbGVhdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZVBvcG92ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9mZignbW91c2VsZWF2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaG92ZXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wb3ZlckVsbTIgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcucG9wb3ZlcicpLmhvdmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQoJy5wb3BvdmVyOmhvdmVyJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaG92ZXJlZCAmJiBoaWRlUG9wb3ZlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9fdGhpcy5tb3VzZWxlYXZlTWlsbGlzZWNvbmRzIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZW1pdCBUcmVlIG5vZGVzXG4gICAgICAgICAgICB0aGlzLmxvYWRlZE5vZGVzLmVtaXQoeyBub2RlczogY2FsbGJhY2subm9kZURCLmRiLCAkIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGNyZWF0ZSBUcmVhbnQgaW5zdGFuY2UgYW5kIGFkZCBpdHMgY29udGFpbmVyIElEXG4gICAgICAgIC8vIHRoaXMgaW5zdGFuY2UgY2FuIGJlIHVzZWZ1bCB0byBvcGVyYXRlIG9uIHRoZSBUcmVlXG4gICAgICAgIGNvbnN0IHRyZWFudCA9IG5ldyBUcmVhbnQodGhpcy5kYXRhLCBjYWxsYmFjaywgJCk7XG4gICAgICAgIHRyZWFudC5jb250YWluZXJfaWQgPSB0aGlzLmNoYXJ0SWQ7XG4gICAgICAgIHRoaXMubG9hZGVkVHJlYW50LmVtaXQodHJlYW50KTtcbiAgICB9XG59XG4iXX0=