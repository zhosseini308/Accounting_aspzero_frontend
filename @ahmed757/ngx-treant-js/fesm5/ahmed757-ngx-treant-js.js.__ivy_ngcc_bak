import { __assign, __decorate } from 'tslib';
import { EventEmitter, Input, Output, Component, NgModule } from '@angular/core';

/**
 * A simple Angular2+ component used as a wrapper for [TreantJS](https://fperucic.github.io/treant-js/) library
 * for visualization of tree (chart) diagrams, with additional functionality.
 */
var NgxTreantJsComponent = /** @class */ (function () {
    function NgxTreantJsComponent() {
        this.clicked = new EventEmitter();
        this.hovered = new EventEmitter();
        this.dragged = new EventEmitter();
        this.dropped = new EventEmitter();
        this.updated = new EventEmitter();
        this.loadedNodes = new EventEmitter();
        this.loadedTreant = new EventEmitter();
        this.loadedTree = new EventEmitter();
    }
    NgxTreantJsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var callback = function (callback) {
            var popoverElm1;
            var popoverElm2;
            var timeout;
            var draggedNode;
            var droppedNode;
            var __this = _this;
            // add ids to nodeDOMs
            for (var i = 0; i < callback.nodeDB.db.length; i++) {
                callback.nodeDB.db[i].nodeDOM.id = callback.nodeDB.db[i].id;
            }
            _this.loadedTree.emit(callback);
            var $oNodes = $("#" + _this.chartId + " .node");
            // add support for drag and drop functionality
            var addDragAndDropSupport = function () {
                for (var i = 0; i < $oNodes.length; i++) {
                    $oNodes[i].draggable = true;
                    $oNodes[i].classList.add('drop');
                    $oNodes[i].addEventListener('dragstart', drag, false);
                    $oNodes[i].addEventListener('drop', drop, false);
                    $oNodes[i].addEventListener('dragover', allowDrop, false);
                }
            };
            // swap nodes after drag and drop
            function swapNodes(nodes, dragIndex, dropIndex) {
                var temp = nodes[dragIndex];
                var dragClone = __assign({}, temp);
                var dropClone = __assign({}, nodes[dropIndex]);
                nodes[dragIndex] = nodes[dropIndex];
                nodes[dropIndex] = temp;
                // set dragged node props
                nodes[dragIndex].id = dragClone.id;
                nodes[dragIndex].nodeDOM.id = dragClone.id;
                nodes[dragIndex].parentId = dragClone.parentId;
                nodes[dragIndex].children = dragClone.children;
                nodes[dragIndex].connStyle = dragClone.connStyle;
                nodes[dragIndex].stackChildren = dragClone.stackChildren;
                nodes[dragIndex].stackParentId = dragClone.stackParentId;
                nodes[dragIndex].stackParent = dragClone.stackParent;
                nodes[dragIndex].leftNeighborId = dragClone.leftNeighborId;
                nodes[dragIndex].rightNeighborId = dragClone.rightNeighborId;
                nodes[dragIndex].collapsed = dragClone.collapsed;
                nodes[dragIndex].collapsable = dragClone.collapsable;
                // set dropped node props
                nodes[dropIndex].id = dropClone.id;
                nodes[dropIndex].nodeDOM.id = dropClone.id;
                nodes[dropIndex].parentId = dropClone.parentId;
                nodes[dropIndex].children = dropClone.children;
                nodes[dropIndex].connStyle = dropClone.connStyle;
                nodes[dropIndex].stackChildren = dropClone.stackChildren;
                nodes[dropIndex].stackParent = dropClone.stackParent;
                nodes[dropIndex].stackParentId = dropClone.stackParentId;
                nodes[dropIndex].leftNeighborId = dropClone.leftNeighborId;
                nodes[dropIndex].rightNeighborId = dropClone.rightNeighborId;
                nodes[dropIndex].collapsed = dropClone.collapsed;
                nodes[dropIndex].collapsable = dropClone.collapsable;
            }
            function hidePopover() {
                $(popoverElm1).popover('hide');
                $(popoverElm2).popover('hide');
            }
            function drag(event) {
                var _this = this;
                draggedNode = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                hidePopover();
                __this.dragged.emit({ draggedNode: draggedNode, $: $ });
            }
            function drop(event) {
                var _this = this;
                event.preventDefault();
                droppedNode = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                hidePopover();
                __this.dropped.emit({ draggedNode: droppedNode, droppedNode: draggedNode, $: $ });
                var dragIndex = callback.nodeDB.db.findIndex(function (n) { return n.id == draggedNode.id; });
                var dropIndex = callback.nodeDB.db.findIndex(function (n) { return n.id == droppedNode.id; });
                swapNodes(callback.nodeDB.db, dragIndex, dropIndex);
                callback.positionTree();
            }
            function allowDrop(event) {
                event.preventDefault();
            }
            function updateTextVal(currentEle, value, classVal, node, propName) {
                var isTextUpdated = false;
                $(document).off('click');
                $(currentEle).html('<input class="input-field" style="width:' +
                    $(currentEle).width() +
                    'px;" type="text" value="' +
                    value +
                    '"/>');
                $('.input-field').focus();
                $('.input-field').keyup(function (event) {
                    if (event.keyCode === 13) {
                        var inputClass = $(event.target).attr('class');
                        var newValue = $('.input-field').val() ? $('.input-field').val() : value;
                        $(currentEle).html('<p class="' + classVal + '">' + newValue + '</p>');
                        if (inputClass === 'input-field') {
                            isTextUpdated = true;
                        }
                        if (propName) {
                            node.text[propName] = newValue;
                            node.width = $(currentEle).width();
                        }
                        callback.positionTree();
                        __this.updated.emit({ node: node, $: $ });
                    }
                });
                $(document).click(function () {
                    if ($(event.target).attr('class') !== 'input-field' && !isTextUpdated) {
                        var newValue = $('.input-field').val() ? $('.input-field').val() : value;
                        $(currentEle).html('<p class="' + classVal + '">' + newValue + '</p>');
                        $(document).off('click');
                        if (propName) {
                            node.text[propName] = newValue;
                            node.width = $(currentEle).width();
                        }
                        callback.positionTree();
                        __this.updated.emit({ node: node, $: $ });
                    }
                });
            }
            _this.isDraggable && addDragAndDropSupport();
            $oNodes.off('click').on('click', function (event) {
                var _this = this;
                var node = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                hidePopover();
                __this.clicked.emit({ node: node, $: $ });
            });
            $oNodes.off('dblclick').on('dblclick', function (e) {
                var _this = this;
                if ($(event.target).attr('class') !== 'input-field') {
                    e.stopPropagation();
                    var node = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                    var currentEle = $(event.target);
                    var value = $(event.target).text();
                    var classVal = $(event.target).attr('class');
                    var propName = classVal && classVal.split('-')[1];
                    hidePopover();
                    node.text &&
                        node.text[propName] &&
                        updateTextVal(currentEle, value, classVal, node, propName);
                }
            });
            if (_this.popoverSettings) {
                $oNodes.popover(_this.popoverSettings);
                $oNodes
                    .off('mouseenter')
                    .on('mouseenter', function (e) {
                    var _this = this;
                    hidePopover();
                    popoverElm1 = this;
                    $(this).popover('show');
                    var node = callback.nodeDB.db.find(function (n) { return n.id == $(_this).attr('id'); });
                    __this.hovered.emit({ node: node, $: $ });
                    clearTimeout(timeout);
                    $('.popover')
                        .off('mouseleave')
                        .on('mouseleave', function () {
                        hidePopover();
                    });
                })
                    .off('mouseleave')
                    .on('mouseleave', function (e) {
                    var hovered = false;
                    popoverElm2 = this;
                    $('.popover').hover(function () {
                        hovered = true;
                    }, function () {
                        hovered = false;
                    });
                    if (!$('.popover:hover').length) {
                        timeout = setTimeout(function () {
                            !hovered && hidePopover();
                        }, __this.mouseleaveMilliseconds || 0);
                    }
                });
            }
            // emit Tree nodes
            _this.loadedNodes.emit({ nodes: callback.nodeDB.db, $: $ });
        };
        // create Treant instance and add its container ID
        // this instance can be useful to operate on the Tree
        var treant = new Treant(this.data, callback, $);
        treant.container_id = this.chartId;
        this.loadedTreant.emit(treant);
    };
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "chartId", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "chartClass", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "data", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "popoverSettings", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "mouseleaveMilliseconds", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "isDraggable", void 0);
    __decorate([
        Input()
    ], NgxTreantJsComponent.prototype, "textProps", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "clicked", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "hovered", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "dragged", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "dropped", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "updated", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "loadedNodes", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "loadedTreant", void 0);
    __decorate([
        Output()
    ], NgxTreantJsComponent.prototype, "loadedTree", void 0);
    NgxTreantJsComponent = __decorate([
        Component({
            selector: 'ngx-treant-chart',
            template: "<div [className]=\"chartClass\" [id]=\"chartId\"></div>\n"
        })
    ], NgxTreantJsComponent);
    return NgxTreantJsComponent;
}());

var NgxTreantJsModule = /** @class */ (function () {
    function NgxTreantJsModule() {
    }
    NgxTreantJsModule = __decorate([
        NgModule({
            declarations: [NgxTreantJsComponent],
            imports: [],
            exports: [NgxTreantJsComponent],
        })
    ], NgxTreantJsModule);
    return NgxTreantJsModule;
}());

/*
 * Public API Surface of ngx-treant-js
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxTreantJsComponent, NgxTreantJsModule };
//# sourceMappingURL=ahmed757-ngx-treant-js.js.map
